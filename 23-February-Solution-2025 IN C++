class Solution {
    int preIndex = 0;
    unordered_map<int, int> postMap;
    TreeNode* construct(vector<int>& preorder, vector<int>& postorder,
                        int postStart, int postEnd) {
        if (postStart > postEnd || preIndex >= preorder.size()) {
            return nullptr;
        }
        TreeNode* root = new TreeNode(preorder[preIndex++]);
        if (postStart == postEnd) {
            return root;
        }
        int postIndex = postMap[preorder[preIndex]];
        if (postIndex >= postStart && postIndex <= postEnd) {
            root->left = construct(preorder, postorder, postStart, postIndex);
            root->right =
                construct(preorder, postorder, postIndex + 1, postEnd - 1);
        }
        return root;
    }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder,
                                   vector<int>& postorder) {
        int n = postorder.size();
        for (int i = 0; i < n; i++) {
            postMap[postorder[i]] = i;
        }
        return construct(preorder, postorder, 0, n - 1);
    }
};
